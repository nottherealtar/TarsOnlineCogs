import { axios } from "@pipedream/platform"

export default defineComponent({
  name: "Generate AI Video",
  description: "Generate a 5-second video using AI video generation service based on a text prompt",
  type: "action",
  props: {
    prompt: {
      type: "string",
      label: "Video Prompt",
      description: "Text prompt to generate the video from (e.g., from ChatGPT)"
    },
    api_key: {
      type: "string",
      label: "RunwayML API Key",
      description: "Your RunwayML API key for video generation",
      secret: true
    },
    duration: {
      type: "integer",
      label: "Duration (seconds)",
      description: "Video duration in seconds",
      default: 5,
      min: 1,
      max: 10
    },
    model: {
      type: "string",
      label: "Model",
      description: "RunwayML model to use for video generation",
      options: [
        { label: "Gen-3 Alpha Turbo", value: "gen3a_turbo" },
        { label: "Gen-3 Alpha", value: "gen3a" }
      ],
      default: "gen3a_turbo"
    },
    seed: {
      type: "integer",
      label: "Seed",
      description: "Random seed for reproducible results (optional)",
      optional: true
    }
  },
  async run({ $ }) {
    // Generate video using RunwayML API
    const generateResponse = await axios($, {
      url: "https://api.runwayml.com/v1/image_to_video",
      method: "POST",
      headers: {
        "Authorization": `Bearer ${this.api_key}`,
        "Content-Type": "application/json",
        "X-Runway-Version": "2024-09-13"
      },
      data: {
        promptText: this.prompt,
        duration: this.duration,
        model: this.model,
        ...(this.seed && { seed: this.seed }),
        watermark: false
      }
    });

    const taskId = generateResponse.id;
    
    // Poll for completion
    let videoResponse;
    let attempts = 0;
    const maxAttempts = 60; // 5 minutes max wait time
    
    while (attempts < maxAttempts) {
      await new Promise(resolve => setTimeout(resolve, 5000)); // Wait 5 seconds
      
      videoResponse = await axios($, {
        url: `https://api.runwayml.com/v1/tasks/${taskId}`,
        method: "GET",
        headers: {
          "Authorization": `Bearer ${this.api_key}`,
          "X-Runway-Version": "2024-09-13"
        }
      });
      
      if (videoResponse.status === "SUCCEEDED") {
        break;
      } else if (videoResponse.status === "FAILED") {
        throw new Error(`Video generation failed: ${videoResponse.failure || 'Unknown error'}`);
      }
      
      attempts++;
    }
    
    if (attempts >= maxAttempts) {
      throw new Error("Video generation timed out after 5 minutes");
    }

    const videoUrl = videoResponse.output?.[0];
    
    $.export("$summary", `Successfully generated AI video from prompt: "${this.prompt.substring(0, 50)}${this.prompt.length > 50 ? '...' : ''}"`);
    
    return {
      taskId,
      videoUrl,
      prompt: this.prompt,
      duration: this.duration,
      model: this.model,
      status: videoResponse.status,
      createdAt: videoResponse.createdAt,
      finishedAt: videoResponse.finishedAt
    };
  }
})